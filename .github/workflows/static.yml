<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Static 50-Question Test – Chapter 5: Intake & Release</title>
  <style>
    body { 
      font-family: Arial, sans-serif; 
      margin: 0; 
      line-height: 1.6; 
      background: #f4f8fb; 
      padding-bottom: 70px; 
    }
    .question-header { font-size: 18px; font-weight: bold; margin-bottom: 5px; }
    .question-text { font-size: 16px; margin-bottom: 10px; }
    .choice-button {
      display: flex; 
      align-items: center; 
      border: 1px solid #ccc;
      border-radius: 10px;
      padding: 10px;
      margin: 10px 0;
      background: #ffffff;
      cursor: pointer;
      transition: background 0.3s ease;
      font-size: 16px;
      position: relative;
    }
    .choice-button input[type="radio"] {
      margin-right: 10px; 
      opacity: 1; 
      pointer-events: auto;
      position: static; 
      -webkit-appearance: radio; 
      -moz-appearance: radio;
      appearance: radio;
    }
    .choice-text-container {
        flex-grow: 1; 
    }
    .actual-choice-text-visually-obscured { /* New class for visual hiding */
        opacity: 0.3;
        text-decoration: line-through;
    }
    .toggle-visibility-btn {
        background: none;
        border: none;
        font-size: 1em; 
        cursor: pointer;
        padding: 0 5px;
        margin-left: auto; 
        color: #555;
        display: flex; 
        align-items: center;
        justify-content: center;
    }
    .toggle-visibility-btn svg { 
        width: 20px;
        height: 20px;
    }
    .toggle-visibility-btn:hover {
        color: #000;
    }

    .choice-button:hover {
      background: #e6f0ff;
    }

    .correct { border: 2px solid green; background: #e0ffe0; padding: 10px; margin-bottom:10px; border-radius: 5px; }
    .incorrect { border: 2px solid red; background: #ffe0e0; padding: 10px; margin-bottom:10px; border-radius: 5px; }
    .explanation { font-style: italic; color: #555; margin-top: 10px; }

    .question-actions-bar {
      display: flex;
      justify-content: center; 
      align-items: center;
      flex-wrap: wrap; 
      gap: 10px; 
      padding: 15px 10px; 
      margin-top: 20px; 
      margin-bottom: 10px; 
    }
    .question-actions-bar button {
      padding: 10px 15px; 
      font-size: 16px;
      cursor: pointer;
      border-radius: 5px;
      border: 1px solid #ccc;
      background-color: #fff; 
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
      transition: background-color 0.2s ease, border-color 0.2s ease;
    }
    .question-actions-bar button:hover {
      background-color: #f8f9fa;
      border-color: #bbb;
    }
    .question-actions-bar button#submitBtn {
        background-color: #22c55e; 
        color: white;
        border-color: #22c55e;
    }
    .question-actions-bar button#submitBtn:hover {
        background-color: #16a34a;
    }
    .review-actions-bar { 
        text-align: center;
        padding: 10px 0 20px 0; 
    }
    .review-actions-bar button {
        padding: 10px 20px; 
        font-size: 1rem;
        cursor: pointer;
        border-radius: 5px;
        background-color: #007bff;
        color: white;
        border: none;
        margin: 5px; 
    }
    .review-actions-bar button:hover {
        background-color: #0056b3;
    }


    .quiz-controls { /* Footer */
      justify-content: center; 
      align-items: center;
      padding: 10px 20px; 
      background: #dbeafe;
      position: fixed;
      bottom: 0;
      left: 0; 
      right: 0; 
      display: flex;
      z-index: 100; 
      box-sizing: border-box; 
    }
    .quiz-controls .progress-info { 
        display: flex;
        align-items: center;
        justify-content: space-between; 
        width: 100%;
    }
   
    #progressText { font-size: 16px; margin: 0 10px 0 0; }
    .choice-button.selected {
      background: #d0ebff;
      border-color: #3b82f6;
    }

    #resultsScreen {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: #4a90e2; 
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      z-index: 10000; 
      padding: 10px;
      box-sizing: border-box;
    }

    .results-card {
      display: flex;
      background: white;
      border-radius: 10px;
      box-shadow: 0 0 20px rgba(0,0,0,0.3);
      overflow: auto; 
      width: 95%; 
      max-width: 900px; 
      max-height: 90vh; 
      flex-direction: column; 
    }

    .results-left-panel {
      flex-shrink: 0; 
      background: #37474f; 
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      color: white;
      padding: 20px;
      text-align: center;
      border-top-left-radius: 10px; 
      border-top-right-radius: 10px;
      border-bottom-left-radius: 0;
    }

    .results-right-panel {
      flex-grow: 1; 
      background: #ffffff;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      padding: 20px;
      text-align: center;
      border-bottom-left-radius: 10px; 
      border-bottom-right-radius: 10px;
      border-top-right-radius: 0;
    }
     @media (min-width: 768px) { 
      .results-card {
        flex-direction: row; 
        min-height: 400px; 
        overflow: hidden; 
      }
      .results-left-panel {
        border-top-right-radius: 0;
        border-bottom-left-radius: 10px;
        flex-basis: 300px; 
      }
      .results-right-panel {
        border-top-right-radius: 10px;
        border-bottom-left-radius: 0;
      }
    }


    .score-circle {
      width: 100px; 
      height: 100px;
      border-radius: 50%;
      border: 6px solid #e0e0e0; 
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 30px; 
      font-weight: bold;
      color: #4CAF50; 
      margin-bottom: 15px; 
      position: relative;
    }

    .score-circle::before {
      content: '';
      position: absolute;
      top: -6px; 
      left: -6px;
      width: calc(100% + 12px); 
      height: calc(100% + 12px);
      border-radius: 50%;
      border: 6px solid transparent; 
      border-top-color: #4CAF50; 
      border-right-color: #4CAF50;
      transform: rotate(-45deg); 
      box-sizing: border-box;
    }

    .upload-button { 
      padding: 12px 25px; 
      font-size: 16px; 
      background-color: #4CAF50; 
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      margin-top: 20px; 
      box-shadow: 0 4px 6px rgba(0,0,0,0.1);
      transition: background-color 0.3s ease;
    }

    .upload-button:hover {
      background-color: #45a049;
    }

    .attention-message {
      background: white;
      padding: 15px; 
      border-radius: 8px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      margin-top: 15px; 
      width: 90%;
      max-width: 800px;
      text-align: center;
      font-size: 14px; 
      color: #333;
    }

    #quizContentScrollable {
      max-height: calc(100vh - 100px); 
      overflow-y: auto;
      padding: 10px 15px 0 0; 
    }
    
    #mainQuizLayout { 
        display: flex;
        padding-top: 40px; 
    }

    #sidebar {
      width: 60px;
      background: #e3edf8;
      position: fixed;
      top: 40px; 
      bottom: 50px; 
      overflow-y: auto; 
      z-index: 50; 
      padding-top: 10px; 
      padding-bottom: 10px;
      transition: width 0.3s ease, opacity 0.3s ease, bottom 0.3s ease;
    }

    #sidebar::-webkit-scrollbar {
      width: 0px; 
      background: transparent; 
    }
    #sidebar::-webkit-scrollbar-thumb {
      background: transparent; 
    }

    #questionNav {
      list-style: none;
      padding: 0; 
      margin: 0; 
      text-align: center;
    }
    
    #quizFormContainer { 
        margin-left: 75px; 
        flex-grow: 1;
        padding-right: 15px; 
        transition: margin-left 0.3s ease;
    }


    .header-bar { 
      display: flex;
      justify-content: space-between;
      align-items: center;
      background-color: #1f2937;
      color: white;
      padding: 10px 20px;
      font-size: 14px;
      position: fixed; 
      top: 0;
      left: 0;
      right: 0;
      z-index: 100; 
      box-sizing: border-box;
    }

    .intro-screen-container {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: #fbbf24;
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 9999;
      flex-direction: column;
      padding: 15px; 
      box-sizing: border-box;
    }

    .intro-card-container {
      background: white;
      padding: 20px; 
      border-radius: 10px;
      text-align: center;
      box-shadow: 0 0 15px rgba(0,0,0,0.2);
      width: 90%;
      max-width: 450px; 
    }
    .intro-card-container h2 {
        font-size: 1.4rem; 
        margin-bottom: 0.5em;
    }
    .intro-card-container p {
        font-size: 0.85rem; 
        margin-bottom: 1em;
    }


    .intro-stop-icon {
      margin-bottom: 15px; 
    }

    .intro-start-button {
      margin-top: 15px; 
      padding: 10px 20px;
      font-size: 16px;
      cursor: pointer;
      background-color: #10b981;
      color: white;
      border: none;
      border-radius: 5px;
    }

    .question-count-select-container {
      margin-top: 15px; 
    }

    .question-count-label {
      font-size: 1rem; 
      margin-right: 8px;
    }

    .question-count-select {
      padding: 8px 10px; 
      border-radius: 5px;
      border: 1px solid #ccc;
      font-size: 1rem; 
    }

    #submitScreen {
      display: none; 
      position: fixed; 
      top: 0; 
      left: 0; 
      width: 100%; 
      height: 100%; 
      background: rgba(0,0,0,0.6); 
      z-index: 9998; 
      align-items: center;
      justify-content: center;
      padding: 15px;
      box-sizing: border-box;
    }
    .submit-card {
      background: white;
      border-radius: 10px;
      box-shadow: 0 5px 20px rgba(0,0,0,0.25); 
      width: 100%;
      max-width: 550px; 
      display: flex;
      flex-direction: column; 
    }
    .submit-panel {
      padding: 20px;
      text-align: center;
      flex: 1;
    }
    .submit-panel-left {
      background: #f0f4f8; 
      border-top-left-radius: 10px;
      border-top-right-radius: 10px; 
    }
    .submit-panel-right {
      background: #ffffff;
      border-bottom-left-radius: 10px;
      border-bottom-right-radius: 10px;
    }
     .submit-panel button {
        padding: 12px 22px; 
        font-size: 1rem;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        margin-top: 15px;
        transition: background-color 0.2s ease;
    }
    .submit-go-back-btn { background: #4b5563; color: white; } 
    .submit-go-back-btn:hover { background: #374151; }
    .submit-confirm-btn { background: #22c55e; color: white; } 
    .submit-confirm-btn:hover { background: #16a34a; }


    @media (min-width: 640px) { 
        .submit-card {
            flex-direction: row; 
        }
        .submit-panel-left {
            border-top-right-radius: 0;
            border-bottom-left-radius: 10px;
        }
        .submit-panel-right {
            border-top-right-radius: 10px; 
            border-bottom-left-radius: 0; 
            border-bottom-right-radius: 10px; 
        }
    }
    #confirmSubmitMessage {
        color: red;
        font-size: 0.9em;
        margin-top: 10px;
        min-height: 1.2em; 
    }

    @media (max-width: 767px) {
        body {
            padding-bottom: 60px; 
        }
        #sidebar {
            display: none; 
        }
        #quizFormContainer {
            margin-left: 15px; 
            padding-right: 15px;
        }
        .choice-button {
            padding: 12px; 
            font-size: 1rem;
        }
         .choice-button input[type="radio"] {
            margin-right: 8px;
        }
        .toggle-visibility-btn {
            font-size: 1.1em;
            padding: 0 3px;
        }
        .quiz-controls { 
            padding: 8px 10px; 
        }
        .quiz-controls .progress-info span {
             font-size: 0.85rem;
        }
      
         .header-bar {
            padding: 10px 15px;
        }
        .header-bar div {
            font-size: 0.85rem; 
        }
        #progressText {
            font-size: 0.9rem;
        }
        .question-header { font-size: 1.1rem; }
        .question-text { font-size: 0.95rem; }

        .results-card { max-height: 85vh; } 
        .score-circle { width: 90px; height: 90px; font-size: 28px; border-width: 5px; }
        .score-circle::before { top: -5px; left: -5px; width: calc(100% + 10px); height: calc(100% + 10px); border-width: 5px;}
        .upload-button { padding: 10px 20px; font-size: 1rem; }
        .attention-message { font-size: 0.85rem; padding: 10px; }

        .question-actions-bar button {
            padding: 8px 12px;
            font-size: 0.9rem;
            flex-grow: 1; 
            min-width: 80px; 
        }
         .question-actions-bar {
            gap: 5px; 
         }
    }

    @media (max-width: 480px) { 
        .question-actions-bar button {
            font-size: 0.85rem;
        }
        .intro-card-container h2 { font-size: 1.2rem; }
        .intro-card-container p { font-size: 0.8rem; }
        .question-count-label, .question-count-select { font-size: 0.9rem; }
    }

  </style>
</head>
<body>
  <div id="introScreen" class="intro-screen-container">
    <div class="intro-card-container">
      <svg viewBox="0 0 100 100" width="80" height="80" class="intro-stop-icon"> <polygon points="30,5 70,5 95,30 95,70 70,95 30,95 5,70 5,30" fill="red" stroke="white" stroke-width="3" />
        <text x="50" y="60" font-size="18" fill="white" text-anchor="middle" font-family="Arial" font-weight="bold">STOP</text>
      </svg>
      <h2>Do Not Start Until Instructed</h2>
      <p>Activity conducted during this exam does not matter. Mr. Phipps is not here—do whatever you like.</p>
      
      <div class="question-count-select-container">
        <label for="questionCount" class="question-count-label">Number of Questions:</label>
        <select id="questionCount" class="question-count-select">
          <option value="10">10</option>
          <option value="25">25</option>
          <option value="50" selected>50</option> 
        </select>
      </div>

      <button onclick="startExam()" class="intro-start-button">Start Exam</button>
    </div>
  </div>

  <div id="mainQuizContainer" style="display:none;"> 
    <div class="header-bar"> 
      <div><strong>Class 45</strong></div>
      <div><strong>Chapter 5: Intake & Release Exam</strong></div>
      <div><strong id="timer">30:00</strong></div>
    </div>

    <div id="mainQuizLayout">
      <nav id="sidebar">
        <ul id="questionNav"></ul>
      </nav>
      <div id="quizFormContainer">
        <div id="quizContentScrollable">
          <div id="progress" style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px; padding-top:10px;">
            <button type="button" onclick="flagQuestion()" id="flagButton" style="font-size: 14px; padding: 5px 10px;">🚩 Flag</button>
            <span id="progressText"></span>
          </div>
          <div class="review-actions-bar" id="reviewActionsTop" style="display:none;"> <button onclick="retakeTest()">Retake Test</button>
          </div>
          <form id="quizForm"></form>
          <div class="question-actions-bar">
            <button type="button" onclick="prevQuestion()">⟵ Previous</button>
            <button type="button" onclick="skipQuestion()">⏭ Skip</button>
            <button id="submitBtn" type="button" onclick="showSubmitScreen()" style="display: none;">✅ Submit</button>
            <button type="button" onclick="nextQuestion()">Next ⟶</button>
          </div>
          <div class="review-actions-bar" id="reviewActionsBottom" style="display:none;"> <button onclick="retakeTest()">Retake Test</button>
          </div>
        </div>
      </div>
    </div>
    <div class="quiz-controls"> 
      <div class="progress-info">
        <span id="progressTextBottom">Question 1 of 50</span>
        <span style='font-size: 0.8em;'>BKRDI Version 0.1.7</span>
      </div>
    </div>
  </div>

  <div id="submitScreen"> 
    <div class="submit-card">
      <div class="submit-panel submit-panel-left">
        <h2>Return to Exam</h2>
        <p>By clicking this button, you will be directed back to the exam.</p>
        <button onclick="hideSubmitScreen()" class="submit-go-back-btn">Go Back</button>
      </div>
      <div class="submit-panel submit-panel-right">
        <h2>Exit Exam</h2>
        <p>Click 'Submit Exam' to upload and close this exam file.</p>
        <label style="margin: 20px 0; display: flex; align-items: center; justify-content: center; font-size: 14px;">
          <input type="checkbox" id="confirmSubmit" style="margin-right: 10px; transform: scale(1.5);">
          I confirm that I have completed my exam.
        </label>
        <button onclick="confirmAndSubmit()" class="submit-confirm-btn">Submit Exam</button>
        <div id="confirmSubmitMessage"></div>
      </div>
    </div>
  </div>

  <div id="resultsScreen" style="display: none;">
    <div class="results-card">
      <div class="results-left-panel">
        <svg viewBox="0 0 24 24" width="60" height="60" fill="currentColor" style="margin-bottom: 10px;"> <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
        </svg>
        <h2 style="font-size: 1.5rem;">BKRDIFY</h2> </div>
      <div class="results-right-panel">
        <h3 style="font-size: 1.3rem; margin-bottom: 10px;">Preliminary Results</h3> <p style="font-size: 1rem; margin-bottom: 15px;">Objective Question Score *</p> <div class="score-circle">
          <span id="finalScore">75%</span>
        </div>
        <p style="font-size: 0.8rem; color: #555; margin-top: 10px;">This is the score for the objective questions only and I'm not sure what objective means</p> <p style="font-size: 0.8rem; color: #555; margin-top: 5px;">Test ID: <span id="testIdDisplay"></span></p> <button class="upload-button" onclick="showReviewPage()">Review</button>
      </div>
    </div>
    <div class="attention-message">
      <p><strong>ATTENTION:</strong></p>
      <p>You will be informed of your final score, which is this score, so yeah</p>
    </div>
  </div>

  <script>
// Function to shuffle an array (Fisher-Yates algorithm)
function shuffleArray(array) {
  let newArray = [...array]; // Work on a copy
  for (let i = newArray.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [newArray[i], newArray[j]] = [newArray[j], newArray[i]];
  }
  return newArray;
}

// Original question pool (will be combined with new questions)
let existingQuestionPool = [
  {
    "q": "What is the meaning of 'DOB' as it appears on an inmate's identification?",
    "c": ["Date of Booking", "Date of Birth", "Department of Bureaucracy", "Document of Behavior"],
    "a": 1, // Original correct answer: "Date of Birth"
    "e": "DOB (date of birth): As it appears on the inmate's identification."
  },
  {
    "q": "Beyond identifying information, what else do common features of arrest papers include regarding the charges?",
    "c": ["Only the number of charges.", "The charges, including statute number(s) and number of charges.", "Only the type of crime committed.", "The court recommendations for sentencing."],
    "a": 1, // Original: "The charges, including statute number(s) and number of charges."
    "e": "Charges (including statute number(s) and number of charges)."
  },
  {
    "q": "Which specific document is included in commitment papers that details sentencing information and any court recommendations?",
    "c": ["Arrest affidavit.", "Court paperwork with sentencing information and any court recommendations.", "Victim contact notification.", "Probable cause affidavit."],
    "a": 1, // Original: "Court paperwork with sentencing information and any court recommendations."
    "e": "Common features include: Court paperwork with sentencing information and any court recommendations."
  },
  {
    "q": "What is the definition of 'Intake' in the context of correctional facilities?",
    "c": ["The transfer process between facilities.", "The admission process in a county detention facility.", "The assessment of an inmate's needs.", "The release process from a facility."],
    "a": 1, // Original: "The admission process in a county detention facility."
    "e": "Intake: The admission process in a county detention facility."
  },
  {
    "q": "What does a 'Strip Search' in state facilities aim to discourage?",
    "c": ["Socialization among inmates.", "The introduction and movement of contraband.", "Inmate participation in programs.", "Communication with legal counsel."],
    "a": 1, // Original: "The introduction and movement of contraband."
    "e": "Strip Search (State Facilities): May be conducted on inmates entering or exiting and at any time to discourage contraband."
  },
  {
    "q": "What is the significance of 'Friction Ridge' in fingerprint identification?",
    "c": ["It is a unique identifier for tattoos.", "It is a raised portion of skin on fingers and palms, unique to each individual.", "It indicates the age of an inmate.", "It is a type of skin disease."],
    "a": 1, "e": "Friction Ridge: A raised portion of skin on fingers and palms, unique to each individual."
  },
  {
    "q": "What is the primary function of the 'Biometric Identification Solution (BIS)' system?",
    "c": ["To manage inmate visitation schedules.", "To search fingerprint databases with LiveScan machines.", "To track inmate financial transactions.", "To monitor inmate communications."],
    "a": 1, "e": "BIS (Biometric Identification Solutions): System used with LiveScan machines to search fingerprint databases."
  },
  {
    "q": "Which state custody grade (Rule 33-601.210, F.A.C.) refers to inmates eligible for outside work assignments but not for placement in a community residential center?",
    "c": ["Community custody grade.", "Minimum custody grade.", "Medium custody grade.", "Close custody grade."],
    "a": 1, "e": "Minimum custody grade: Refers to inmates eligible for outside work assignments but not for placement in a community residential center."
  },
  {
    "q": "What is the high-risk period for suicide for inmates during incarceration?",
    "c": ["After 30 days in custody.", "Within the first 24 hours of incarceration.", "During court appearances.", "Upon release from the facility."],
    "a": 1, "e": "Suicide Risk: High risk for inmates within the first 24 hours of incarceration."
  },
  {
    "q": "What is the Florida Statute that defines DNA requirements for convicted or charged felons?",
    "c": ["Chapter 960, F.S.", "s. 901.211, F.S.", "s. 943.325, F.S.", "Rule 33-601.502, F.A.C."],
    "a": 2, "e": "DNA Collection: Required by s. 943.325, F.S., for certain convicted or arrested individuals."
  },
  {
    "q": "What is the purpose of 'victim contact notification' on arrest papers, if required by chapter 960, F.S.?",
    "c": ["To inform the victim of the inmate's release date.", "To notify the victim of the arrest and allow them to request further information or services related to the case.", "To obtain a statement from the victim for court.", "To allow the victim to visit the inmate in custody."],
    "a": 1, "e": "Victim contact notification (if required by chapter 960, F.S.)."
  },
  {
    "q": "What is included in commitment papers that is signed by a judge?",
    "c": ["The inmate's personal statement.", "Judgment and sentence pages.", "Witness testimonies.", "An inventory of the inmate's personal property."],
    "a": 1, "e": "Common features include: Judgment and sentence pages (signed by a judge)."
  },
  {
    "q": "What does a 'summary of inmate's behavior and adjustment from the sending agency' in commitment papers typically note?",
    "c": ["Their dietary preferences.", "Their hobbies and interests.", "Discipline, housing, and adjustment to a correctional setting.", "Their educational background."],
    "a": 2, "e": "Summary of inmate's behavior and adjustment from the sending agency (noting discipline, housing)."
  },
  {
    "q": "What is verified regarding credit cards, bank cards, driver's licenses, and ID cards during an inmate property search?",
    "c": ["Their expiration date.", "That they match the inmate's name.", "Their monetary value.", "Their country of origin."],
    "a": 1, "e": "Verify that credit cards, bank cards, driver's licenses, and ID cards match the inmate's name."
  },
  {
    "q": "What should be done with legal paperwork pertaining to an inmate's case that they are allowed to keep?",
    "c": ["It should be read thoroughly by the officer.", "Search but do not read; remove paper clips, staples, contraband before returning.", "It should be confiscated for official review.", "It should be destroyed after inspection."],
    "a": 1, "e": "Legal paperwork (search but do not read; remove paper clips, staples, contraband before returning)."
  },
  {
    "q": "What is the purpose of the Offender Based Tracking System (OBTS) number in FCIC criminal histories?",
    "c": ["To track the inmate's medical appointments.", "To track their arrest date, county, and arresting agency.", "To manage their financial transactions.", "To identify their family members."],
    "a": 1, "e": "Florida arrest and registration history: Offender Based Tracking System (OBTS) number, arrest date, county, arresting agency, charge information."
  },
  {
    "q": "What is a characteristic of a 'too-dry hand' when attempting to obtain quality fingerprints?",
    "c": ["It will smudge easily.", "It should be moistened with lotion.", "It can be moistened with water or by rubbing against an oily surface like the forehead.", "It indicates a medical condition."],
    "a": 2, "e": "Moisten a too-dry hand with water or by rubbing against an oily surface like the forehead (never use lotion)."
  },
  {
    "q": "What is the consequence if the Biometric Identification Solution (BIS) database cannot read a fingerprint?",
    "c": ["It will automatically generate a new SID.", "It will not be able to make a positive identification.", "It will forward the print to a manual review team only.", "It will temporarily store the print for later processing."],
    "a": 1, "e": "If the BIS database cannot read the fingerprint, it will not be able to make a positive identification."
  },
  {
    "q": "What is 'SID' as it relates to the Biometric Identification Solution (BIS)?",
    "c": ["Security Information Document.", "State Identification Number.", "System Integration Data.", "Secure Inmate Database."],
    "a": 1, "e": "SID (State Identification Number): A unique number assigned by the system upon fingerprint matching or new entry."
  },
  {
    "q": "What general housing assignment principle is applied to all admitted inmates?",
    "c": ["They are assigned to housing based on their last known address.", "Housing assignments are based on an inmate's potential or basic risk and needs.", "Inmates choose their housing unit upon arrival.", "Housing is assigned randomly to prevent favoritism."],
    "a": 1, "e": "Housing assignments are based on an inmate's potential or basic risk and needs."
  },
  {
    "q": "What information is typically gathered during a health screening at a state facility's reception process?",
    "c": ["Immediate medical or psychological needs.", "Details about the inmate's family medical history.", "Long-term dietary preferences.", "Past disciplinary actions."],
    "a": 0, "e": "A health screening identifies immediate medical or psychological needs."
  },
  {
    "q": "When is an inmate assigned a unique Department of Corrections number during the reception process?",
    "c": ["Upon release from the facility.", "Only if they are repeat offenders.", "During reception, after a health screening.", "After their first court appearance."],
    "a": 2, "e": "During reception, an inmate is assigned a unique Department of Corrections number."
  },
  {
    "q": "What factors does the Department of Corrections reception process consider for inmate evaluation and facility assignment?",
    "c": ["Only the inmate's age and gender.", "Offense nature/severity, sentence characteristics, mental/health status, age, and criminal history.", "Their personal preferences for housing.", "Their highest level of education and hobbies."],
    "a": 1, "e": "Inmate evaluation and facility assignment consider offense nature/severity, sentence characteristics, mental/health status, age, and criminal history."
  },
  {
    "q": "What is the consequence of introducing contraband into a facility, according to Florida Statutes?",
    "c": ["A verbal warning.", "Loss of visitation privileges.", "Additional criminal charges.", "A minor fine."],
    "a": 2, "e": "Introducing contraband can lead to additional criminal charges under Florida Statutes."
  },
  {
    "q": "Which types of items are generally permitted for inmates to keep while in custody?",
    "c": ["Electronic devices and large sums of cash.", "Religious materials, legal paperwork, medically necessary items, photographs (limited), and personal hygiene items.", "Any clothing item they wish.", "Expensive jewelry and personal vehicles."],
    "a": 1, "e": "Generally permitted items include: Religious materials, legal paperwork, medically necessary items, photographs (limited), and personal hygiene items."
  },
  {
    "q": "When inventorying clothing items for storage, how should they be described?",
    "c": ["As 'clothing' without specific details.", "By type and color.", "By brand name only.", "By their estimated value."],
    "a": 1, "e": "Be specific: List clothing by type and color."
  },
  {
    "q": "What action should be taken with identification forms (photo ID, Social Security card) during inmate property inventory?",
    "c": ["Store them separately without verification.", "Ensure they are in the inmate's name.", "Return them immediately to the inmate.", "Dispose of them if they are expired."],
    "a": 1, "e": "Identification forms (photo ID, Social Security card) must be in the inmate's name."
  },
  {
    "q": "What is the purpose of searching personal property, such as wallets, pocketbooks, and backpacks, during intake?",
    "c": ["To determine the inmate's financial status.", "To confiscate all items from the inmate.", "To remove and inspect all items for contraband.", "To categorize items for donation."],
    "a": 2, "e": "Remove and inspect all items from wallets, pocketbooks, backpacks, or any other articles associated with the inmate to find contraband."
  },
  {
    "q": "What is the role of the Florida Model Jail Standards regarding admissions into county detention facilities?",
    "c": ["They dictate the meal plans for inmates.", "They prohibit admitting unconscious, seriously ill, or injured persons without medical clearance.", "They establish guidelines for inmate visitation.", "They determine staffing levels for the facility."],
    "a": 1, "e": "Florida Model Jail Standards prohibit admitting unconscious, seriously ill, or injured persons into a county facility without medical clearance."
  },
  {
    "q": "When is identity verification also performed during an inmate's incarceration?",
    "c": ["Only at initial intake.", "When an inmate is moved, such as between correctional facilities or to and from court, or when moved to another area within the facility.", "Only when the inmate requests it.", "Never, after the initial intake process."],
    "a": 1, "e": "Identity is also verified when an inmate is moved, such as between correctional facilities or to and from court, or or when moved to another area within the facility."
  },
  {
    "q": "What is the key characteristic of a 'Community custody grade' inmate in state correctional facilities?",
    "c": ["They are eligible for outside work assignments without supervision.", "They are eligible for placement at a community residential facility.", "They are required to be under direct, armed supervision.", "They are sentenced to death."],
    "a": 1, "e": "Community custody grade refers to inmates eligible for placement at a community residential facility."
  },
  {
    "q": "If a juvenile detained in a county facility is awaiting court disposition, what criteria must have been met?",
    "c": ["They must have volunteered for detention.", "They must have been direct filed, indicted, or waived.", "They must be accompanied by an adult.", "They must have completed a diversion program."],
    "a": 1, "e": "Juveniles detained in county facilities awaiting court disposition must have been direct filed, indicted, or waived."
  },
  {
    "q": "What restrictions might apply to housing assignments for inmates?",
    "c": ["Only their educational background.", "Security concerns, high-profile cases, or medical and psychological needs.", "Their favorite sports team.", "Their preferred color scheme for their cell."],
    "a": 1, "e": "Restrictions may apply due to security concerns, high-profile cases, or medical and psychological needs (e.g., suicidal tendencies)."
  },
  {
    "q": "What is the court-determined date that marks the 'end (or expiration) of sentence' and can be reduced by gain time?",
    "c": ["NTA", "ROR", "EOS", "DOB"],
    "a": 2, "e": "EOS (end (or expiration) of sentence) is a court-determined date that can be reduced by gain time."
  },
  {
    "q": "What type of information is included in a criminal history printout from FCIC/NCIC, commonly found in commitment papers?",
    "c": ["Current criminal history printout from FCIC/NCIC.", "Personal financial statements.", "Driving record only.", "Medical prescription history."],
    "a": 0, "e": "Current criminal history printout from FCIC/NCIC is a common feature of commitment papers."
  },
  {
    "q": "What are 'Arrest Papers'?",
    "c": ["Documents issued by the court after conviction.", "Paperwork filed by the arresting officer that results in the person being arrested and taken to a detention facility for admission.", "Internal memos between correctional officers.", "Forms for requesting inmate transfers."],
    "a": 1, "e": "Arrest papers are the paperwork filed by the arresting officer that results in the person being arrested and taken to a detention facility for admission."
  },
  {
    "q": "What is the significance of the DC6-224 form?",
    "c": ["It is a medical consent form.", "It is a visitor log.", "It is the Property Receipt form.", "It is a disciplinary report form."],
    "a": 2, "e": "DC6-224 is the Property Receipt form."
  },
  {
    "q": "What is the primary responsibility of property officers in a correctional facility?",
    "c": ["Managing inmate disciplinary actions.", "Storing all property, making sure that the property room is secured at all times, inventorying property, and documenting the delivery or release of all property.", "Providing legal counsel to inmates.", "Overseeing inmate visitation schedules."],
    "a": 1, "e": "Property officers are responsible for storage, security, inventory, and documenting property delivery/release."
  },
  {
    "q": "What system does FDLE's identification unit use to receive electronically submitted fingerprints?",
    "c": ["Manual fingerprint cards.", "LiveScan machines.", "Traditional ink pads.", "Portable handheld scanners only."],
    "a": 1, "e": "FDLE's identification unit receives electronically submitted fingerprints through the LiveScan machine."
  },
  {
    "q": "What information does an FBI number, when entered into the NCIC system, provide about a specific person?",
    "c": ["Only their Social Security Number.", "PII, arrest(s) in the U.S. or its territories, location of arrest, arresting agency, date of arrest, and disposition of arrest.", "Their financial records and employment history.", "Their educational background and family tree."],
    "a": 1, "e": "NCIC assigns the arrestee an FBI number which, when entered into the system, provides information on a specific person such as: PII, arrest(s) for a person in the United States or its territories, location of arrest (county and state), arresting agency, date of arrest, disposition of arrest."
  },
  {
    "q": "What should be done with cell phones or other electronic devices found during an inmate's property inventory?",
    "c": ["Leave them turned on for verification.", "List by brand and note condition, then turn off and remove the battery before storing.", "Give them back to the inmate for safekeeping.", "Connect them to the facility's Wi-Fi network."],
    "a": 1, "e": "Cell phones/electronic devices: List by brand and note condition. Turn off and remove the battery before storing."
  },
  {
    "q": "If an inmate refuses to sign the property inventory form, what is the correct procedure?",
    "c": ["Proceed with storage without a signature.", "Note the refusal, and a second officer must verify the inventory and sign.", "Force the inmate to sign the form.", "Discard the inmate's property."],
    "a": 1, "e": "If the inmate refuses to sign the property inventory form, note the refusal; a second officer will verify the inventory and sign the form."
  },
  {
    "q": "Why is it important to check an inmate's identity when issuing hygiene items?",
    "c": ["To track their personal preferences.", "To prevent inmates from using another's ID to get extra items.", "To ensure they receive the most expensive items.", "To confirm their release date."],
    "a": 1, "e": "To prevent inmates from using another inmate's identification to get more hygiene items, check the inmate's ID card, armband identification, or wristband identification to confirm that the photo matches the inmate being issued hygiene items."
  },
  {
    "q": "What is 'PII' in the context of FCIC/NCIC information?",
    "c": ["Personal Inmate Identification", "Preliminary Investigation Information", "Personally Identifiable Information", "Public Information Index"],
    "a": 2, "e": "PII (Personally Identifiable Information): name, race, sex, date of birth, Social Security number, and aliases."
  },
  {
    "q": "What is a 'Friction Ridge'?",
    "c": ["A type of security barrier in the facility.", "A raised portion of skin on fingers and palms, unique to each individual.", "A method of securing documents.", "A common term for a fingerprint anomaly."],
    "a": 1, "e": "The friction ridge is a raised portion of skin on the fingers and palm of a hand that consists of connected ridge units."
  },
  {
    "q": "What is a 'Rapid ID Device' used for in criminal justice agencies?",
    "c": ["Scanning documents for storage.", "A small, often portable fingerprint scanner using less than 10 prints, processing quickly for identification.", "A tool for quickly accessing inmate financial records.", "A device for remote surveillance of inmates."],
    "a": 1, "e": "Rapid ID device: A small, often portable fingerprint scanner using less than 10 prints, processing quickly (around one minute transaction time) for identification."
  },
  {
    "q": "Which organization compiles national standards and best practices for capturing and submitting facial images?",
    "c": ["The American Bar Association (ABA).", "The Facial Identification Scientific Working Group (FISWG).", "The National Association of Chiefs of Police (NACP).", "The Department of Homeland Security (DHS)."],
    "a": 1, "e": "The Facial Identification Scientific Working Group (FISWG) compiles national standards and best practice guidelines for capturing and submitting facial images."
  },
  {
    "q": "What information must be displayed at all times when an inmate is dressed?",
    "c": ["Their personal religious symbols.", "Their inmate identification (wristband or ID card).", "A copy of their charges.", "Their family contact information."],
    "a": 1, "e": "Inmate identification will be displayed at all times the inmate is dressed."
  },
  {
    "q": "What is the security level for inmates in a county correctional facility who have serious and violent felony charges (past or pending) or who pose a threat to the safety of staff and facility security?",
    "c": ["Minimum security level.", "Medium security level.", "Maximum security level.", "Community security level."],
    "a": 2, "e": "Maximum security level: For high-risk inmates with serious and violent felony charges (past or pending) or who pose a threat to the safety of staff and facility security."
  },
  {
    "q": "According to Rule 33-601.210, F.A.C., which state custody grade refers to inmates who are sentenced to death?",
    "c": ["Community custody grade.", "Minimum custody grade.", "Close custody grade.", "Maximum custody grade."],
    "a": 3, "e": "Maximum custody grade refers to inmates who are sentenced to death."
  }
  // End of original 50 questions
];

// New questions provided by the user
const newQuestionsFromUser = [
  {
    q: "When inventorying and documenting inmate property, it is important to:",
    c: ["Inventory each item and note the exact number of every item.", "Inventory the inmate's property in their presence whenever possible.", "Ensure the property being inventoried belongs to the correct inmate when dealing with multiple inmates.", "All answers Listed"], // Changed
    a_letter: "D", 
    e: "Lesson 2, CO502.3"
  },
  {
    q: "The electronic system that matches prints to an existing State Identification Number (SID) or generates a new SID for first-time arrestees is part of which technology?",
    c: ["Rapid ID Device", "Facial Identification Scientific Working Group (FISWG)", "Biometric Identification Solutions (BIS)", "National Crime Information Center (NCIC)"],
    a_letter: "C",
    e: "Lesson 3, CO503.4"
  },
  {
    q: "Which of the following forms of identification are used to verify an inmate's identity during the intake/reception process?",
    c: ["Driver's license", "Social Security card", "Fingerprinting", "Both 'Driver\\'s license' and 'Fingerprinting' are correct."], 
    a_letter: "D",
    e: "Lesson 1, CO501.1"
  },
  {
    q: "When photographing an inmate at intake or reception, what are the requirements for capturing facial images?",
    c: ["Only a front-facing photograph is necessary.", "The inmate's eyes should be open, and their hair should not obstruct the full view of their face.", "Only distinguishing scars or tattoos need to be photographed.", "Photographs are not submitted to FDLE electronically."],
    a_letter: "B",
    e: "Lesson 3, CO503.6"
  },
  {
    q: "The date determined by the court at sentencing, which can be reduced due to gain time, is known as:",
    c: ["DOB", "EOS", "NTA", "ROR"],
    a_letter: "B",
    e: "Lesson 1, CO501.4"
  },
  {
    q: "Which of the following types of property are inmates generally allowed to keep while in custody, according to facility policies and procedures?",
    c: ["Personal cell phones", "Legal paperwork pertinent to the inmate's case", "All forms of jewelry", "Credit cards and bank cards"],
    a_letter: "B",
    e: "Lesson 2, CO502.4"
  },
  {
    q: "What is a significant risk factor for inmates within the first 24 hours of incarceration?",
    c: ["High risk of escape.", "High risk of suicide.", "High risk of property damage.", "High risk of disciplinary issues."],
    a_letter: "B",
    e: "Lesson 4, CO504.5"
  },
  {
    q: "When are juveniles detained in county facilities awaiting court disposition required to have been \"direct filed\"?",
    c: ["When they are charged as an adult and the case is transferred out of the Juvenile Division.", "When they are awaiting transfer to a state facility.", "When they are released on recognizance.", "When they have a minimal criminal history."],
    a_letter: "A",
    e: "Lesson 4, CO504.4"
  },
  {
    q: "To prevent the introduction of contraband during a pat search, what should an officer do with outerwear like jackets or layered clothing?",
    c: ["Leave it on the inmate during the entire search.", "Search it while on the inmate, then remove and place it out of the inmate's reach before continuing.", "Hand it back to the inmate immediately after searching.", "Discard it if it appears suspicious."],
    a_letter: "B",
    e: "Lesson 2, CO502.1"
  },
  {
    q: "The primary purpose for classification is to:",
    c: ["Determine an inmate's work assignment only.", "Place inmates in the type of housing that best meets their needs and to provide reasonable protection for all inmates.", "Segregate all inmates immediately upon intake.", "Reduce the overall inmate population."],
    a_letter: "B",
    e: "Lesson 4"
  },
  {
    q: "What information is highly recommended to be followed when capturing, transmitting, and submitting facial images to FDLE?",
    c: ["Florida Department of Law Enforcement (FDLE) internal guidelines only.", "National standards and best practice guidelines compiled by the Facial Identification Scientific Working Group (FISWG).", "Agency-specific guidelines only.", "The inmate's preference for their photograph."],
    a_letter: "B",
    e: "Lesson 3, CO503.6"
  },
  {
    q: "In county detention facilities, the admission process to a correctional facility is formally known as:",
    c: ["Reception", "Intake", "Assessment", "Processing"],
    a_letter: "B",
    e: "Lesson 1"
  },
  {
    q: "When an inmate returns to a county facility after being transported to a hospital emergency room due to injury or impairment, what must the officer provide?",
    c: ["A verbal confirmation from the medical staff.", "Written medical clearance from a physician.", "A signed waiver from the inmate.", "A new set of arrest papers."],
    a_letter: "B",
    e: "Lesson 1, CO501.7"
  },
  {
    q: "Which of the following is a criterion used to establish an inmate's custody grade or security risk level?",
    c: ["Current charges", "Criminal history", "Medical and psychological needs", "All answers Listed"], // Changed
    a_letter: "D",
    e: "Lesson 4, CO504.1"
  },
  {
    q: "In county facilities, strip searches are to be conducted only in accordance with:",
    c: ["Facility policy alone.", "s. 901.211, F.S.", "The discretion of the intake officer.", "State facility guidelines."],
    a_letter: "B",
    e: "Lesson 2, CO502.1"
  },
  {
    q: "What is the purpose of checking an inmate's ID card, armband identification, or wristband identification when issuing hygiene items?",
    c: ["To verify the inmate's criminal history.", "To prevent inmates from using another inmate's identification to get more hygiene items.", "To document the inmate's housing assignment.", "To confirm the inmate's release date."],
    a_letter: "B",
    e: "Lesson 2, CO502.7"
  },
  {
    q: "After documenting an inmate's property, what is the next crucial step to ensure accuracy and accountability?",
    c: ["Immediately deliver it to the property room.", "Review the form with the inmate and obtain signatures.", "Dispose of any questionable items.", "Re-inventory the property with a supervisor."],
    a_letter: "B",
    e: "Lesson 2, CO502.5"
  },
  {
    q: "In a state facility, the admission process, known as reception, involves several steps. Which of the following is a task completed during reception?",
    c: ["Assigning a unique Department of Corrections number.", "Conducting a health screening to establish immediate medical or psychological needs.", "Notifying next of kin.", "Both 'Assigning a unique Department of Corrections number.' and 'Conducting a health screening to establish immediate medical or psychological needs.' are correct."], 
    a_letter: "D",
    e: "Lesson 1, CO501.7"
  },
  {
    q: "When restoring an inmate's stored property before release, what is the first step?",
    c: ["Thoroughly search the property for contraband.", "Verify the inmate's identity.", "Have the inmate sign a receipt immediately.", "Locate the inmate's stored property."],
    a_letter: "B",
    e: "Lesson 5, CO505.4"
  },
  {
    q: "Which state custody grade refers to inmates who must be maintained within an armed perimeter or under direct, armed supervision when outside a secure perimeter?",
    c: ["Minimum custody", "Medium custody", "Close custody", "Maximum custody"],
    a_letter: "C",
    e: "Lesson 4, CO504.3"
  },
  {
    q: "The process by which inmates are discharged from a county detention facility or state correctional institution is known as:",
    c: ["Intake", "Reception", "Release", "Classification"],
    a_letter: "C",
    e: "Lesson 5"
  },
  {
    q: "What does PII stand for in the context of criminal history records?",
    c: ["Public Information Index", "Personally Identifiable Information", "Police Incident Information", "Prior Incarceration Identifier"],
    a_letter: "B",
    e: "Lesson 3, CO503.1"
  },
  {
    q: "When searching an inmate during intake/reception, which of the following is a critical procedure?",
    c: ["Prioritizing speed over thoroughness in all searches.", "Conducting searches that are gender-specific unless emergency situations require otherwise.", "Relying solely on metal detectors for contraband detection.", "Limiting searches to only high-risk inmates to conserve resources."],
    a_letter: "B",
    e: "Lesson 2, CO502.1"
  },
  {
    q: "Money given to qualified inmates who are released from the custody of the Department of Corrections, in accordance with 33-601.502, F.A.C., is known as a:",
    c: ["Release bond", "Discharge gratuity", "Stipend", "Reintegration fund"],
    a_letter: "B",
    e: "Lesson 5, CO505.5"
  },
  {
    q: "In county correctional facilities, which of the following is considered a security level for inmates who are considered low risk, have adjusted well to incarceration, and have a minimal criminal history with no violent charges?",
    c: ["Medium security level", "Community security level", "Minimum security level", "Close security level"],
    a_letter: "C",
    e: "Lesson 4, CO504.2"
  },
  {
    q: "A summons or writ issued in place of a physical arrest, which requires a person to appear in court, is known by what abbreviation?",
    c: ["ROR", "Probable Cause Affidavit", "NTA", "Commitment Order"],
    a_letter: "C",
    e: "Lesson 1, CO501.4"
  },
  {
    q: "Pretrial release of an arrested person who promises in writing to appear for trial at a later date, with no monetary bond required, is referred to as:",
    c: ["NTA", "EOS", "ROR", "SB"],
    a_letter: "C",
    e: "Lesson 1, CO501.4"
  },
  {
    q: "The Florida Crime Information Center (FCIC) serves as the central repository for all criminal history records in the state of Florida, including:",
    c: ["Wanted person information", "Missing person information", "Probation information", "All answers Listed"], // Changed
    a_letter: "D",
    e: "Lesson 3"
  },
  {
    q: "An inmate with serious and violent felony charges, either in the past or currently pending, or who poses a threat to the safety of staff and facility security, would typically be assigned which county security level?",
    c: ["Confinement Security", "Medium security", "Maximum security", "Community security"],
    a_letter: "C",
    e: "Lesson 4, CO504.2"
  },
  {
    q: "State facilities follow five custody grades. Which custody grade refers to inmates who are eligible for placement at a community residential facility?",
    c: ["Minimum custody", "Probation Custody", "Community custody", "Close custody"],
    a_letter: "C",
    e: "Lesson 4, CO504.3"
  },
  {
    q: "When conducting a thorough search of inmate property, what should be done with prescription medication containers?",
    c: ["Discard them immediately.", "Check to ensure the name on the container is the inmate's.", "Treat all medication, even in labeled containers, as contraband.", "Allow the inmate to keep all medication regardless of labeling."],
    a_letter: "B",
    e: "Lesson 2, CO502.2"
  },
  {
    q: "If an inmate refuses to sign the property inventory form, what is the required procedure?",
    c: ["The officer should sign on behalf of the inmate.", "Note the refusal, and a second officer will verify the inventory and sign the form.", "The property should not be stored.", "The inmate forfeits their right to the property."],
    a_letter: "B",
    e: "Lesson 2, CO502.5"
  },
  {
    q: "Classification is a management tool used by facilities to assign security risk levels or custody grades to inmates. When are inmates classified?",
    c: ["Only upon release from the facility.", "When admitted to a facility as soon as practical.", "Only if they have a violent criminal history.", "Annually, regardless of behavior."],
    a_letter: "B",
    e: "Lesson 4"
  },
  {
    q: "Inmate photographs may be used to generate an identification wristband or ID card. What information is often included on these computer-printed IDs?",
    c: ["Inmate's photo", "Sex and race", "Date of birth and agency-generated identification number", "All answers Listed"], // Changed
    a_letter: "D",
    e: "Lesson 3, CO503.7"
  },
  {
    q: "There are four destinations for inmate property. Which of the following is NOT one of these destinations?",
    c: ["Destruction for items considered contraband", "Retention by the inmate as specified in facility policies", "Immediate return to the inmate's family", "Storage until the inmate is released"],
    a_letter: "C",
    e: "Lesson 2, CO502.3"
  },
  {
    q: "When inventorying and describing property that will be stored until an inmate's release, what is the correct procedure for listing jewelry?",
    c: ["Determine the monetary value of each piece.", "List by item, description, and color, avoiding value determination.", "Only list watches by brand name.", "Only record missing stones if they are valuable."],
    a_letter: "B",
    e: "Lesson 2, CO502.5"
  },
  {
    q: "Fingerprint patterns or friction ridges are unique for each individual. What is a friction ridge?",
    c: ["A raised portion of skin on the fingers and palm of a hand that consists of connected ridge units.", "A type of fingerprint classification system.", "A tool used to capture fingerprints.", "A common skin condition found on inmates."],
    a_letter: "A",
    e: "Lesson 3"
  },
  {
    q: "To obtain industry standard quality prints using a LiveScan electronic submission machine, which of the following tips should be followed?",
    c: ["Apply excessive pressure to ensure a dark print.", "Roll each finger and thumb from nail to nail, then lift up and away to avoid smudging.", "Use lotion on too-dry hands to moisten them.", "Only capture prints from the fingertips."],
    a_letter: "B",
    e: "Lesson 3, CO503.3"
  },
  {
    q: "Which of the following are legal requirements regarding the use of FCIC/NCIC information?",
    c: ["All persons using FCIC/NCIC must be certified.", "Information is for criminal justice purposes only.", "Information can be shared with family members if they have a valid reason.", "Both 'All persons using FCIC/NCIC must be certified.' and 'Information is for criminal justice purposes only.' are correct."], 
    a_letter: "D",
    e: "Lesson 3, CO503.2"
  },
  {
    q: "For inked fingerprint or palm print cards, where are signatures required?",
    c: ["Only the inmate signs on the front.", "Only the officer signs on the back.", "Both the inmate and the officer taking the prints are required to sign the front of the card.", "The inmate signs on the front, and the officer prints and signs their name on the back."],
    a_letter: "D",
    e: "Lesson 3, CO503.5"
  },
  {
    q: "Commitment papers are documents or orders generated by the court after an offender is found guilty of a crime. Which of the following is a common feature of commitment papers?",
    c: ["Name of the arresting officer", "Copies of warrants or court orders", "Judgment and sentence pages signed by a judge", "Agency-generated case number"],
    a_letter: "C",
    e: "Lesson 1, CO501.3"
  },
  {
    q: "Arrest papers are defined as the paperwork filed by the arresting officer that results in a person being arrested and taken to a detention facility for admission. Which of the following is a common feature of arrest papers?",
    c: ["Judgment and sentence pages", "Current criminal history printout from FCIC/NCIC", "Probable cause affidavit", "Medical transfer summary"],
    a_letter: "C",
    e: "Lesson 1, CO501.2"
  },
  {
    q: "Confirming the completeness of arrest or commitment papers is a critical part of the intake/reception process. This includes ensuring that:",
    c: ["All paperwork needed to complete the arrest or commitment is present.", "Arrest paperwork is signed by the arresting officer.", "The inmate's medical history is fully documented.", "Both 'All paperwork needed to complete the arrest or commitment is present.' and 'Arrest paperwork is signed by the arresting officer.' are correct."], 
    a_letter: "D",
    e: "Lesson 1, CO501.5"
  },
  {
    q: "During the intake/reception process, inmates are permitted to keep certain documents while in custody. Which of the following are inmates allowed to keep?",
    c: ["Copies of arrest papers", "Personal cell phones", "Legal paperwork pertaining to the inmate's case", "Both 'Copies of arrest papers' and 'Legal paperwork pertaining to the inmate\\'s case' are correct."], 
    a_letter: "D",
    e: "Lesson 1, CO501.6"
  },
  {
    q: "According to Florida Model Jail Standards, which of the following persons are prohibited from being admitted into a county facility without medical clearance?",
    c: ["Unconscious persons", "Seriously ill persons", "Injured persons", "All answers Listed"], // Changed
    a_letter: "D",
    e: "Lesson 1, CO501.7"
  },
  {
    q: "Which of the following are common grounds for an inmate's release?",
    c: ["Court order", "Posting of bond", "Inmate's personal request", "Both 'Court order' and 'Posting of bond' are correct."], 
    a_letter: "D",
    e: "Lesson 5, CO505.1"
  },
  {
    q: "To verify release documentation, an officer should:",
    c: ["Review the order for accuracy and completeness.", "Confirm that the release order was issued for a specific inmate.", "Verify that the release order was issued by the proper authority.", "All answers Listed"], // Changed
    a_letter: "D",
    e: "Lesson 5, CO505.1"
  },
  {
    q: "Before releasing an inmate, common procedures include:",
    c: ["Notifying the inmate of their upcoming release.", "Checking for outstanding warrants.", "Resolving any grievances or claims for damage.", "Both 'Notifying the inmate of their upcoming release.' and 'Checking for outstanding warrants.' are correct."], 
    a_letter: "D",
    e: "Lesson 5, CO505.2"
  },
  {
    q: "According to Florida Statutes (s. 943.325), DNA must be collected from persons convicted of or arrested for which types of offenses?",
    c: ["Only misdemeanor offenses.", "Felony or attempted offenses, and certain misdemeanor offenses.", "Only traffic offenses.", "Any offense that results in incarceration."],
    a_letter: "B",
    e: "Lesson 5, CO505.3"
  },
  { 
    q: "Which of the following is a criterion used to establish an inmate's custody grade or security risk level?",
    c: ["Current charges", "Criminal history", "Medical and psychological needs", "All answers Listed"], // Changed
    a_letter: "D",
    e: "Lesson 4, CO504.1"
  }
];

// Function to rephrase "Both X and Y" or "All of the above" answers
// and also replace "All of the above" with "All answers Listed"
function processMetaAnswers(questionData) {
    const letterMap = { A: 0, B: 1, C: 2, D: 3 };
    const originalChoices = [...questionData.c]; // Copy original choices
    let correctChoiceText = "";

    if (questionData.a_letter && originalChoices[letterMap[questionData.a_letter]] !== undefined) {
        correctChoiceText = originalChoices[letterMap[questionData.a_letter]];
    }

    // Replace "All of the above" with "All answers Listed" in all choices
    const updatedChoices = originalChoices.map(choice => 
        choice === "All of the above." ? "All answers Listed" : choice
    );
     if (correctChoiceText === "All of the above.") {
        correctChoiceText = "All answers Listed";
    }


    // Rephrase "Both X and Y" type answers if they are the correct answer
    if (correctChoiceText.startsWith("Both '") && correctChoiceText.endsWith("' are correct.")) {
        // This part is already handled by the previous rephrasing logic for "Both X and Y"
        // No additional change needed here if the text is already specific.
    } else if (correctChoiceText.startsWith("Both A and C are correct")) {
        if (originalChoices[0] && originalChoices[2]) {
            correctChoiceText = `Both '${originalChoices[0]}' and '${originalChoices[2]}' are correct.`;
        }
    } else if (correctChoiceText.startsWith("Both A and B are correct")) {
        if (originalChoices[0] && originalChoices[1]) {
            correctChoiceText = `Both '${originalChoices[0]}' and '${originalChoices[1]}' are correct.`;
        }
    }
    // Add other "Both X and Y" cases if necessary

    // Find the index of the (potentially rephrased) correct answer text in the updatedChoices
    let finalCorrectIndex = updatedChoices.indexOf(correctChoiceText);
    if (finalCorrectIndex === -1 && questionData.a_letter) { // Fallback if rephrased text not found
        finalCorrectIndex = letterMap[questionData.a_letter]; 
    }


    return {
        q: questionData.q,
        c: updatedChoices, // Use choices where "All of the above" is replaced
        a: finalCorrectIndex, // This will be the index of the correct text in updatedChoices
        e: questionData.e,
        originalCorrectText: correctChoiceText // Keep track of the definitive correct answer text
    };
}


const processedNewQuestions = newQuestionsFromUser.map(nq => {
    return processMetaAnswers(JSON.parse(JSON.stringify(nq)));
});

let combinedQuestionPool = existingQuestionPool.concat(processedNewQuestions);

combinedQuestionPool.forEach(question => {
    // If the question came from the new set, it already has 'originalCorrectText'
    // If it's from the existing pool, we need to define it.
    let correctAnswerTextToTrack = question.originalCorrectText || question.c[question.a];

    if (question.a === undefined || question.a < 0 || question.a >= question.c.length) {
        question.a = 0; 
    }
     if (correctAnswerTextToTrack === "All of the above.") {
        correctAnswerTextToTrack = "All answers Listed";
    }
    
    // Ensure all choices with "All of the above." are changed to "All answers Listed"
    question.c = question.c.map(choice => choice === "All of the above." ? "All answers Listed" : choice);
    
    let shuffledChoices = shuffleArray([...question.c]); 
    let newCorrectIndex = shuffledChoices.indexOf(correctAnswerTextToTrack);

    if (newCorrectIndex === -1) {
        console.error("CRITICAL: Correct answer text not found after shuffling for question:", question.q);
        console.error("Tracked Text:", correctAnswerTextToTrack, "Shuffled Choices:", shuffledChoices, "Original Choices for this Q:", question.c);
        // Fallback: Keep original choices and correct index.
        // This means this specific question's choices won't be shuffled effectively.
        // Or, try to find the original index again in the unshuffled, but now "All answers Listed"-updated list
        let fallbackIndex = question.c.indexOf(correctAnswerTextToTrack);
        if (fallbackIndex !== -1) {
            question.a = fallbackIndex; // Use index from non-shuffled but updated list
        } else {
             console.error("FALLBACK FAILED for:", question.q);
             question.a = 0; // Absolute fallback
        }
    } else {
        question.c = shuffledChoices; 
        question.a = newCorrectIndex; 
    }
});

const questionPool = combinedQuestionPool;


let selectedQuestions = []; 
let currentIndex = 0;
const skipped = []; 
const flagged = []; 
let answers = []; 
let choiceVisibility = {}; 
let testId = ''; 
let timerSeconds = 1800; 
var timerInterval; 


function selectRandomQuestionsFromPool(pool, count) {
  const shuffledFullPool = shuffleArray([...pool]); 
  return shuffledFullPool.slice(0, count);
}

function renderQuiz() {
  const form = document.getElementById("quizForm");
  form.innerHTML = '';

  if (selectedQuestions.length === 0) {
    return;
  }

  const q = selectedQuestions[currentIndex]; 
  const div = document.createElement("div");
  div.classList.add("question");
  div.innerHTML = `<div class='question-header'>Question ${currentIndex + 1}</div><div class='question-text'>${q.q}</div>`;
  
  q.c.forEach((choice, i) => {
    const choiceKey = `q${currentIndex}_c${i}`;
    const isVisuallyObscured = choiceVisibility[choiceKey] === true; // True if obscured
    const selectedClass = answers[currentIndex] === i ? 'selected' : '';
    const inputChecked = answers[currentIndex] === i ? 'checked' : '';
    
    const eyeIconSVG = `
      <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path>
        <circle cx="12" cy="12" r="3"></circle>
      </svg>`;
    const eyeOffIconSVG = `
      <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <path d="M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24"></path>
        <line x1="1" y1="1" x2="23" y2="23"></line>
      </svg>`;

    div.innerHTML += `
      <label class="choice-button ${selectedClass}" for="${choiceKey}_radio">
        <input type="radio" id="${choiceKey}_radio" name="q${currentIndex}" value="${i}" ${inputChecked} onclick="recordAnswer(${i})">
        <span class="choice-text-container">
          ${String.fromCharCode(65 + i)}. <span class="actual-choice-text ${isVisuallyObscured ? 'actual-choice-text-visually-obscured' : ''}">${choice}</span>
        </span>
        <button type="button" class="toggle-visibility-btn" onclick="toggleChoiceVisibility(${currentIndex}, ${i}, event)">
          ${isVisuallyObscured ? eyeOffIconSVG : eyeIconSVG}
        </button>
      </label>`;
  });
  form.appendChild(div);
  
  document.getElementById("progressText").textContent = `Question ${currentIndex + 1} of ${selectedQuestions.length}`; 
  document.getElementById("progressTextBottom").textContent = `Question ${currentIndex + 1} of ${selectedQuestions.length}`; 
  
  document.getElementById("submitBtn").style.display = answers.every(a => a !== null) ? 'inline-block' : 'none';

  const flagButton = document.getElementById("flagButton");
  if (flagButton) {
    if (flagged.includes(currentIndex)) {
      flagButton.innerHTML = '✅ Unflag';
    } else {
      flagButton.innerHTML = '🚩 Flag';
    }
  }
  highlightNavItem(currentIndex); 
}

function toggleChoiceVisibility(qIndex, cIndex, event) {
    event.stopPropagation(); 
    const choiceKey = `q${qIndex}_c${cIndex}`;
    choiceVisibility[choiceKey] = !choiceVisibility[choiceKey]; 
    
    const choiceLabel = document.getElementById(`q${qIndex}_c${cIndex}_radio`).closest('.choice-button');
    const textSpan = choiceLabel.querySelector('.actual-choice-text');
    const iconButton = choiceLabel.querySelector('.toggle-visibility-btn');
    
    const eyeIconSVG = `
      <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path>
        <circle cx="12" cy="12" r="3"></circle>
      </svg>`;
    const eyeOffIconSVG = `
      <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <path d="M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24"></path>
        <line x1="1" y1="1" x2="23" y2="23"></line>
      </svg>`;

    if (choiceVisibility[choiceKey]) { // If now obscured
        textSpan.classList.add('actual-choice-text-visually-obscured');
        iconButton.innerHTML = eyeOffIconSVG;
    } else {
        textSpan.classList.remove('actual-choice-text-visually-obscured');
        iconButton.innerHTML = eyeIconSVG;
    }
}


function recordAnswer(selectedIndex) {
  const alreadySelectedAndAnswered = answers[currentIndex] === selectedIndex;
  answers[currentIndex] = selectedIndex;

  const idxInSkipped = skipped.indexOf(currentIndex);
  if (idxInSkipped > -1) {
    skipped.splice(idxInSkipped, 1); 
  }
  
  document.getElementById("submitBtn").style.display = answers.every(a => a !== null) ? 'inline-block' : 'none';
  generateSidebar(); 

  if (alreadySelectedAndAnswered) { 
    nextQuestion();
  } else {
    // Re-render only the current question's choices to reflect selection,
    // without re-rendering the whole quiz form which might be slow or reset other states.
    const choiceButtons = document.querySelectorAll(`input[name='q${currentIndex}']`);
    choiceButtons.forEach((input, i) => {
        const label = input.closest('.choice-button');
        if (i === selectedIndex) {
            label.classList.add('selected');
        } else {
            label.classList.remove('selected');
        }
    });
  }
}

function skipQuestion() {
  const questionToSkip = currentIndex;
  if (!skipped.includes(questionToSkip)) {
    skipped.push(questionToSkip);
  }
  nextQuestion(); 
}

function flagQuestion() {
  const indexInFlagged = flagged.indexOf(currentIndex);
  if (indexInFlagged > -1) {
    flagged.splice(indexInFlagged, 1);
  } else {
    flagged.push(currentIndex);
  }
  renderQuiz(); 
  generateSidebar(); 
}

function nextQuestion() {
  let potentialNextIndex = currentIndex + 1;

  if (potentialNextIndex >= selectedQuestions.length) { 
    potentialNextIndex = -1; 

    for (const skippedIdx of skipped) {
      if (answers[skippedIdx] === null) {
        potentialNextIndex = skippedIdx;
        break;
      }
    }

    if (potentialNextIndex === -1) {
      for (let i = 0; i < selectedQuestions.length; i++) {
        if (answers[i] === null) {
          potentialNextIndex = i;
          break;
        }
      }
    }
    
    if (potentialNextIndex === -1) {
      potentialNextIndex = currentIndex; 
    }
  }
  currentIndex = potentialNextIndex;
  renderQuiz();
  generateSidebar(); 
}

function prevQuestion() {
  if (currentIndex > 0) {
    currentIndex--;
  }
  renderQuiz();
  generateSidebar(); 
}

function displayReview() {
  choiceVisibility = {}; 
  const form = document.getElementById("quizForm");
  form.innerHTML = ''; 
  let correctCount = 0;

  const reviewActionsTop = document.getElementById("reviewActionsTop");
  if(reviewActionsTop) reviewActionsTop.style.display = 'block';


  selectedQuestions.forEach((q, i) => { 
    const div = document.createElement("div");
    const isCorrect = answers[i] === q.a;
    const statusClass = isCorrect ? 'correct' : 'incorrect';
    const chosenAnswerText = answers[i] !== null && q.c[answers[i]] !== undefined ? q.c[answers[i]] : '<em>No answer provided</em>';
    const correctAnswerText = q.a !== undefined && q.c[q.a] !== undefined ? q.c[q.a] : '<em>Error: Correct answer not found</em>';
    
    div.className = statusClass; 
    div.innerHTML = `<div class='question-header'>Question ${i + 1}</div>` +
                    `<div class='question-text'>${q.q}</div>` +
                    `<p>Your Answer: ${chosenAnswerText}</p>` +
                    `<p>Correct Answer: ${correctAnswerText}</p>` +
                    `<div class='explanation'>${q.e}</div><hr>`;
    if (isCorrect) correctCount++;
    form.appendChild(div);
  });
  
  const scoreHeader = document.createElement("h2");
  scoreHeader.style.textAlign = "center";
  scoreHeader.innerHTML = `Review Summary<br>You answered ${correctCount} out of ${selectedQuestions.length} correctly.`; 
  
  if(reviewActionsTop && reviewActionsTop.parentNode === form.parentNode) { // Check if parentNode is correct
      reviewActionsTop.insertAdjacentElement('afterend', scoreHeader);
  } else if (form.firstChild) {
      form.insertBefore(scoreHeader, form.firstChild);
  } else {
      form.appendChild(scoreHeader);
  }
  
  document.getElementById("progressText").textContent = "Review Mode";
  document.getElementById("progressTextBottom").textContent = "Review Mode";
  
  const questionActionsBar = document.querySelector(".question-actions-bar");
  if(questionActionsBar) questionActionsBar.style.display = 'none';
  document.getElementById("flagButton").style.display = 'none';
  
  const reviewActionsBottom = document.getElementById("reviewActionsBottom");
  if(reviewActionsBottom) reviewActionsBottom.style.display = 'block';
}

function retakeTest() {
    const reviewActionsTop = document.getElementById("reviewActionsTop");
    if(reviewActionsTop) reviewActionsTop.style.display = 'none';
    const reviewActionsBottom = document.getElementById("reviewActionsBottom");
    if(reviewActionsBottom) reviewActionsBottom.style.display = 'none';
    
    document.getElementById('mainQuizContainer').style.display = 'none';
    document.getElementById('resultsScreen').style.display = 'none'; 
    document.getElementById('introScreen').style.display = 'flex'; 

    document.getElementById("timer").textContent = "30:00"; 
    
    currentIndex = 0;
    answers = [];
    skipped.length = 0;
    flagged.length = 0;
    choiceVisibility = {};
    selectedQuestions = [];
}


function submitAll() {
  let correct = 0;
  selectedQuestions.forEach((q, i) => { 
    if (answers[i] === q.a) correct++;
  });
  const scorePercentage = selectedQuestions.length > 0 ? (correct / selectedQuestions.length) * 100 : 0;

  document.getElementById("mainQuizContainer").style.display = "none";
  document.getElementById("resultsScreen").style.display = "flex";
  document.getElementById("finalScore").textContent = `${scorePercentage.toFixed(0)}%`;
  document.getElementById("testIdDisplay").textContent = testId; 

  clearInterval(timerInterval); 
  document.getElementById("timer").textContent = "00:00"; 
}

function showReviewPage() {
  document.getElementById("resultsScreen").style.display = "none";
  document.getElementById("submitScreen").style.display = "none";
  document.getElementById("mainQuizContainer").style.display = "block"; 
  
  const questionActionsBar = document.querySelector(".question-actions-bar");
  if(questionActionsBar) questionActionsBar.style.display = 'none'; 
  document.getElementById("flagButton").style.display = 'none'; 

  displayReview(); 
}

function startExam() {
  document.getElementById('introScreen').style.display = 'none';
  document.getElementById('mainQuizContainer').style.display = 'block'; 
  
  const reviewActionsTop = document.getElementById("reviewActionsTop");
  if(reviewActionsTop) reviewActionsTop.style.display = 'none';
  const reviewActionsBottom = document.getElementById("reviewActionsBottom");
  if(reviewActionsBottom) reviewActionsBottom.style.display = 'none';
  
  const questionActionsBar = document.querySelector(".question-actions-bar");
  if(questionActionsBar) questionActionsBar.style.display = 'flex'; 
  document.getElementById("flagButton").style.display = 'inline-block';


  const questionCountSelect = document.getElementById('questionCount');
  const numberOfQuestions = parseInt(questionCountSelect.value, 10);

  selectedQuestions = selectRandomQuestionsFromPool(questionPool, numberOfQuestions); 
  
  answers = new Array(selectedQuestions.length).fill(null); 
  choiceVisibility = {}; 
  testId = `TEST-${Date.now()}-${Math.floor(Math.random() * 1000)}`;
  currentIndex = 0;
  skipped.length = 0; 
  flagged.length = 0;

  adjustFooterPadding(); 

  generateSidebar(); 
  renderQuiz(); 

  timerSeconds = 1800; 
  const timerDisplay = document.getElementById('timer');
  clearInterval(timerInterval); 
  timerInterval = setInterval(() => {
    if (timerSeconds > 0) {
      timerSeconds--;
      const min = String(Math.floor(timerSeconds / 60)).padStart(2, '0');
      const sec = String(timerSeconds % 60).padStart(2, '0');
      timerDisplay.textContent = `${min}:${sec}`;
    } else {
      submitAll(); 
      clearInterval(timerInterval);
    }
  }, 1000);
}

function showSubmitScreen() {
  document.getElementById("submitScreen").style.display = "flex"; 
}
function hideSubmitScreen() {
  document.getElementById("submitScreen").style.display = "none";
}
function confirmAndSubmit() {
  const confirmMessageDiv = document.getElementById("confirmSubmitMessage");
  if (document.getElementById("confirmSubmit").checked) {
    confirmMessageDiv.textContent = ""; 
    submitAll();
  } else {
    confirmMessageDiv.textContent = "Please confirm you have completed the exam.";
    setTimeout(() => {
        confirmMessageDiv.textContent = ""; 
    }, 3000);
  }
}

function generateSidebar() {
  const sidebar = document.getElementById("sidebar");
  if (sidebar && getComputedStyle(sidebar).display === 'none' && window.innerWidth <= 767) {
      return; 
  }

  const ul = document.getElementById("questionNav");
  if (!ul) return; 
  ul.innerHTML = '';
  for (let i = 0; i < selectedQuestions.length; i++) {
    const li = document.createElement("li");
    li.innerHTML = `<button ondblclick="jumpToQuestion(${i})" onclick="jumpToQuestion(${i})" id="nav-${i}" style="width: 40px; height: 40px; margin: 5px auto; border-radius: 50%; border: none; font-weight: bold; cursor: pointer; display: flex; align-items: center; justify-content: center;">${i + 1}</button>`;
    ul.appendChild(li);
    highlightNavItem(i); 
  }
}

function jumpToQuestion(index) {
  currentIndex = index;
  renderQuiz();
  generateSidebar(); 
}

function highlightNavItem(index) {
  const btn = document.getElementById(`nav-${index}`); 
  if (!btn) return; 

  const isCurrent = index === currentIndex; 
  const isAnswered = answers[index] !== null;
  const isSkipped = skipped.includes(index);
  const isFlagged = flagged.includes(index);

  let bg = '#d0d0d0'; 
  let color = '#000'; 
  let border = '2px solid transparent';
  let iconText = `${index + 1}`; 

  if (isAnswered) {
    bg = '#3b82f6'; 
    color = '#fff'; 
  } else if (isSkipped) {
    bg = '#6b7280'; 
    color = '#fff'; 
    iconText += ' ⏸'; 
  }

  if (isFlagged) {
    iconText += ' 🚩'; 
  }
  
  if (isCurrent) {
    border = '2px solid #1d4ed8'; 
    if (!isAnswered && !isSkipped) { 
      bg = '#e5e7eb'; 
      color = '#000'; 
    }
  }
  
  btn.style.background = bg;
  btn.style.color = color;
  btn.style.border = border;
  btn.innerHTML = iconText.trim(); 

  if (isCurrent && btn.scrollIntoView) { 
      btn.scrollIntoView({ behavior: 'smooth', block: 'nearest' }); 
  }
}

function adjustFooterPadding() {
    const footer = document.querySelector('.quiz-controls');
    const sidebar = document.getElementById('sidebar');
    if (footer && getComputedStyle(footer).position === 'fixed') {
        let footerHeight = footer.offsetHeight;
        document.body.style.paddingBottom = footerHeight + 'px';
        if (sidebar && getComputedStyle(sidebar).display !== 'none') { 
            sidebar.style.bottom = footerHeight + 'px';
        }
    }
}

document.addEventListener("DOMContentLoaded", () => {
    adjustFooterPadding(); 
    window.addEventListener('resize', adjustFooterPadding); 

    if (document.getElementById('introScreen').style.display !== 'none') {
        document.getElementById('mainQuizContainer').style.display = 'none';
    }
});

</script>
</body>
</html>
